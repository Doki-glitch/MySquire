// This is your Prisma schema file,
// learn more about it in the docs  https //pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate  https //pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Personagem {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar(50)
  idade           Int         @db.SmallInt
  descricao       String?     @db.Text
  características String?     @db.Text
  nivel           Int         @db.SmallInt
  experiencia     Int         @db.SmallInt
  status          Status[]
  atributos       Atributo[]
  periciais       Pericia[]
  profissoes      Profissao[]
  especiais       Especiais[]
  armamentos      Armamento[]
  @@map("personagens")
}

model Status {
  id              Int         @id @default(autoincrement())
  vida            Int         @db.SmallInt
  sanidade        Int         @db.SmallInt
  mana            Int         @db.SmallInt
  afinco          Int         @db.SmallInt
  armadura        Int         @db.SmallInt
  estoicismo      Int         @db.SmallInt
  condicoes       Condicao[]
  personagem      Personagem  @relation(fields: [personagemId], references: [id])
  personagemId    Int         @unique
  @@map("status")
}

model Condicao {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar(30)
  duracao         Int         @db.SmallInt
  descricao       String      @db.Text
  status          Status      @relation(fields: [statusId], references: [id])
  statusId        Int
}

model Atributo {
  id              Int         @id @default(autoincrement())
  constituicao    Int         @db.SmallInt
  curiosidade     Int         @db.SmallInt
  destreza        Int         @db.SmallInt
  forca           Int         @db.SmallInt
  mistico         Int         @db.SmallInt
  percepcao       Int         @db.SmallInt
  presenca        Int         @db.SmallInt
  razao           Int         @db.SmallInt
  sorte           Int         @db.SmallInt
  vontade         Int         @db.SmallInt
  personagem      Personagem  @relation(fields: [personagemId], references: [id])
  personagemId    Int         @unique
  @@map("atributos")
}

model Pericia {
  id              Int         @id @default(autoincrement())
  adestramento    Int         @db.SmallInt
  ranged          Int         @db.SmallInt
  melee           Int         @db.SmallInt
  desarmado       Int         @db.SmallInt
  atuacao         Int         @db.SmallInt
  furtividade     Int         @db.SmallInt
  historia        Int         @db.SmallInt
  iniciativa      Int         @db.SmallInt
  leitura         Int         @db.SmallInt
  medicina        Int         @db.SmallInt
  mitologia       Int         @db.SmallInt
  negociacao      Int         @db.SmallInt
  persuasao       Int         @db.SmallInt
  psicologia      Int         @db.SmallInt
  teologia        Int         @db.SmallInt
  personagem      Personagem  @relation(fields: [personagemId], references: [id])
  personagemId    Int         @unique
  @@map("pericias")
}

model Profissao {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar(30)
  bonus           Bonus       @default(Constituição)
  personagem      Personagem  @relation(fields: [personagemId], references: [id])
  personagemId    Int
  habilidades     Habilidade[]
  @@map("profissoes")
}

enum Bonus {
Constituição  
Curiosidade  
Destreza  
Força  
Místico  
Percepção  
Presença  
Razão  
Sorte  
Vontade  
Adestramento 
Armas_à_distância  @map("Armas à Distância")
Armas_brancas      @map("Armas Brancas")
Artes_marciais     @map("Artes Marciais")
Atuação 
Furtividade  
História  
Iniciativa  
Leitura  
Medicina 
Mitologia  
Negociação  
Persuasão  
Psicologia  
Teologia  
}

model Habilidade {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar()
  valor           Int         @db.SmallInt
  profissao       Profissao   @relation(fields: [profissaoId], references: [id])
  profissaoId     Int
  @@map("habilidades")
}

model Especiais {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar()
  descricao       String      @db.Text
  personagem      Personagem  @relation(fields: [personagemId], references: [id])
  personagemId    Int
  @@map("especiais")
}

model Armamento {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar(30)
  danoMin         Int         @db.SmallInt
  danoMax         Int         @db.SmallInt
  habilidade      String      @db.Text
  alcance         Alcance     @default(Pessoal)
  carregador      Int?        @db.SmallInt
  recarga         Recarga?    @default(Instantâneo)
  cadencia        Int?        @db.SmallInt
  caracteristica  Caracteristica[]
  requerimento    Requerimento[]
  penalidade      Penalidade[]
  personagem      Personagem  @relation(fields: [personagemId], references: [id])
  personagemId    Int
  @@map("armamentos")     
}

enum Alcance {
  Pessoal
  Curto
  Médio
  Longo
  Superior
}

enum Recarga {
  Instantâneo
  Ação_extra  @map("Ação Extra")
}

model Caracteristica {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar(30)
  descricao       String      @db.Text
  armamento       Armamento   @relation(fields: [armamentoId], references: [id])
  armamentoId     Int
}

model Requerimento {
  id              Int         @id @default(autoincrement())
  atributo        String      @db.VarChar()
  valor           Int         @db.SmallInt
  armamento       Armamento   @relation(fields: [armamentoId], references: [id])
  armamentoId     Int
}

model Penalidade {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar()
  valor           Int         @db.SmallInt
  armamento       Armamento   @relation(fields: [armamentoId], references: [id])
  armamentoId     Int
}

model Magia {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar(50)
  custo           Int         @db.SmallInt
  tipo            Tipo        @default(Apoio)
  subtipo         Subtipo     @default(Cura)
  cura            String?     @db.VarChar(10)
  duracao         Int?        @db.SmallInt
  efeito          Efeito[]
  purifica        Purifica?   @default(Único)
  dano            String?     @db.VarChar(10)
  escudo          String?     @db.VarChar(10)
  alvos           Alvo?       @default(Único)
  tipoAlvo        TipoAlvo?   @default(Aliado)
  invoHP          String?     @db.VarChar(10)  
  invoATK         String?     @db.VarChar(10)
  invoLS          Boolean     @default(false)
  invoCRIT        Boolean     @default(false)
  invoDEF         Int         @db.SmallInt
  invoSELF        Boolean     @default(false)
  invoSPWN        String?     @db.VarChar(10)
  invoSPEC        Boolean     @default(false)
}

model Efeito {
  id              Int         @id @default(autoincrement())
  nome            String      @db.VarChar(30)
  tipoEfeito      TipoEfeito  @default(Benéfico)
  descricao       String      @db.Text
  magia           Magia       @relation(fields: [magiaId], references: [id])
  magiaId         Int         @unique
}

enum TipoEfeito {
  Benéfico
  Benéfico_maior  @map("Benéfico Maior")
  Maléfico
  Maléfico_maior  @map("Maléfico Maior")
  Defensivo
}

enum Tipo {
  Apoio
  Ataque
  Controle
  Defesa
  Invocação
}

enum Subtipo {
  Cura
  Potencialização
  Purificação
  Movimento
  Dano
  Dano_progressivo  @map("Dano Progressivo")
  Debilitante
  Opressora
  Disruptiva
  Escudo
  Resguardo
  Necromancia
  Animação
  Evocação
}

enum Purifica {
  Único
  Todos
}

enum Alvo {
  Único
  Área
}

enum TipoAlvo {
  Aliado
  Inimigo
}